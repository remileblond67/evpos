<?php

namespace EVPOS\affectationBundle\Entity;

use Doctrine\ORM\EntityRepository;


/**
 * ApplicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ApplicationRepository extends EntityRepository
{
    /**
     * Retourne la liste de toutes les applications
     */
    public function getApplications() {
        $query = $this->createQueryBuilder('a')
            ->orderBy('a.codeAppli')
            ->getQuery()
        ;

        return $query->getResult();
    }

    /**
     * Retourne la liste de toutes les applications, avec leurs UO
     */
    public function getApplicationsFull() {
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.listeUO', 'uo')
            ->addSelect('uo')
            ->leftJoin('a.cpi', 'cpi')
            ->addSelect('cpi')
            ->leftJoin('a.listeAcces', 'acces')
            ->addSelect('acces')
            ->orderBy('a.codeAppli')
            ->getQuery()
        ;

        return $query->getResult();
    }

    /**
     * Retourne l'application correspondant au code appli passé en paramètre
     */
    public function getApplication($codeAppli) {
        $query = $this->createQueryBuilder('a')
            ->setParameter('code', $codeAppli)
            ->where('a.codeAppli = :code')
            ->getQuery()
        ;

        return $query->getSingleResult();
    }

    /**
     * Retourne l'application correspondant au code appli passé en paramètre
     */
    public function getApplicationFull($codeAppli) {
        $query = $this->createQueryBuilder('a')
            ->setParameter('code', $codeAppli)
            ->where('a.codeAppli = :code')
            ->leftJoin('a.cpi', 'cpi')
            ->addSelect('cpi')
            ->leftJoin('a.listeAcces', 'acces')
            ->addSelect('acces')
            ->leftJoin('acces.utilAcces', 'util')
            ->addSelect('util')
            ->leftJoin('util.serviceUtil', 'service')
            ->addSelect('service')
            ->leftJoin('service.direction', 'dir')
            ->addSelect('dir')
            ->getQuery()
        ;

        return $query->getSingleResult();
    }    
    /**
     * Teste si l'application dont le code est passé en parametre existe
     */
    public function isApplication($codeAppli) {
        $nbAppli = $this->createQueryBuilder('a')
            ->select('count(a.codeAppli)')
            ->setParameter('code', $codeAppli)
            ->where('a.codeAppli = :code')
            ->getQuery()
            ->getSingleScalarResult()
        ;
        
        if ($nbAppli >= 1)
            $retour = true;
        else 
            $retour = false;
            
        return $retour;
    }

    /**
     * Retourne le nombre d'application par nature (AS/AI)
     * Utilisé pour les indicateurs d'avancement
     */
    public function getNbAppliNat() {
        $query = $this->createQueryBuilder('a')
            ->select('a.natAppli, count(a.codeAppli) nb')
            ->groupBy('a.natAppli')
            ->getQuery()
        ;

        return $query->getResult();
    }
}

