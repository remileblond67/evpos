<?php

namespace EVPOS\affectationBundle\Entity;
use Doctrine\ORM\EntityRepository;

/**
 * DirectionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DirectionRepository extends EntityRepository
{
    /**
     * Retourne le nombre de directions
     */
    public function getNbDirections() {
        $query = $this->createQueryBuilder('d')
            ->select('count(d)')
            ->getQuery()
        ;

        return $query->getSingleScalarResult();
    }

    /**
     * Récupération de la liste des directions
     */
    public function getDirections() {
        $query = $this->createQueryBuilder('d')
            ->orderBy('d.codeDirection')
            ->where('d.codeDirection is not null')
            ->getQuery()
        ;

        return $query->getResult();
    }

    /**
     * Récupération de la liste des directions et de leurs services
     */
    public function getDirectionsServices() {
        $query = $this->createQueryBuilder('d')
            ->leftJoin('d.listeServices', 's')
            ->addSelect('s')
            ->orderBy('d.codeDirection, s.codeService')
            ->where('d.codeDirection is not null')
            ->getQuery()
        ;

        return $query->getResult();
    }

    /**
     * Récupération de la liste des directions et de leurs services pour l'état d'avancement des services
     */
    public function getDirectionsServicesAvancement() {
        $query = $this->createQueryBuilder('d')
            ->leftJoin('d.listeServices', 's')
            ->leftJoin('s.listeAccesUo', 'a')
            ->leftJoin('a.uoAcces', 'uo')
            ->addSelect('s')
            ->addSelect('a')
            ->addSelect('uo')
            ->orderBy('d.codeDirection, s.codeService')
            ->where('d.codeDirection is not null and uo.migMoca != false and uo.migMoca is not null')
            ->getQuery()
        ;

        return $query->getResult();
    }

    /**
     * Retourne la liste des directions, des services et des applications utilisées
     */
    public function getListeDirServAppli() {
        $query = $this->createQueryBuilder('d')
            ->leftJoin('d.listeServices', 's')
            ->addSelect('s')
            ->leftJoin('s.listeAcces', 'a')
            ->addSelect('a')
            ->orderBy('d.codeDirection, s.codeService')
            ->where('d.codeDirection is not null')
            ->getQuery()
        ;
        return $query->getResult();
    }

    /**
     * Récupération d'une direction à partir du code direction
     */
    public function getDirection($codeDirection) {
        $query = $this->createQueryBuilder('d')
            ->setParameter('code', $codeDirection)
            ->where('d.codeDirection = :code')
            ->getQuery()
        ;

        return $query->getSingleResult();
    }

    /**
     * Vérifie si la direction existe
     */
    public function isDirection($codeDirection) {
        $nbDirection = $this->createQueryBuilder('d')
            ->select('count(d.codeDirection)')
            ->setParameter('code', $codeDirection)
            ->where('d.codeDirection = :code')
            ->getQuery()
            ->getSingleScalarResult()
        ;

        if ($nbDirection >= 1)
            $retour = true;
        else
            $retour = false;

        return $retour;
    }

    /**
     * Liste des directions, services, utilisateurs et de leurs applications
     */
    public function getListeDirServiceUtilAppli() {
        $query = $this->createQueryBuilder('d')
            ->addSelect('d')
            ->leftJoin('d.listeServices', 's')
            ->addSelect('s')
            ->leftJoin('s.listeUtilisateurs', 'u')
            ->addSelect('u')
            ->leftJoin('u.listeAcces', 'a')
            ->addSelect('a')
            ->leftJoin('a.appliAcces', 'app')
            ->addSelect('app')
            ->getQuery()
        ;

        return $query->getResult();
    }

    /**
     * Liste des directions, services, utilisateurs et de leurs applications
     */
    public function getListeDir1ServiceUtilAppli($codeService) {
        $query = $this->createQueryBuilder('d')
            ->addSelect('d')
            ->leftJoin('d.listeServices', 's')
            ->addSelect('s')
            ->leftJoin('s.listeUtilisateurs', 'u')
            ->addSelect('u')
            ->leftJoin('u.listeAcces', 'a')
            ->addSelect('a')
            ->leftJoin('a.appliAcces', 'app')
            ->addSelect('app')
			->setParameter('code', $codeService)
            ->where('s.codeService = :code')
            ->getQuery()
        ;

        return $query->getResult();
    }

    /**
     * Liste des directions, services, utilisateurs
     */
    public function getListeDirServiceUtil() {
        $query = $this->createQueryBuilder('d')
            ->addSelect('d')
            ->leftJoin('d.listeServices', 's')
            ->addSelect('s')
            ->leftJoin('s.listeUtilisateurs', 'u')
            ->addSelect('u')
            ->getQuery()
        ;

        return $query->getResult();
    }

    /**
     * Liste des postes et de leurs utilisateurs par service / direction
     */
    public function getListeDirServicePosteUtil() {
        $query = $this->createQueryBuilder('d')
            ->addSelect('d')
            ->leftJoin('d.listeServices', 's')
            ->addSelect('s')
            ->leftJoin('s.listePostes', 'p')
            ->addSelect('p')
            ->leftJoin('p.listeUtilisateurs', 'u')
            ->addSelect('u')
            ->getQuery()
        ;

        return $query->getResult();
    }
}
