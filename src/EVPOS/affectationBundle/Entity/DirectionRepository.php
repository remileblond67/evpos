<?php

namespace EVPOS\affectationBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * DirectionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DirectionRepository extends EntityRepository
{
    /**
     * Retourne le nombre de directions
     */
    public function getNbDirections() {
        $query = $this->createQueryBuilder('d')
            ->select('count(d)')
            ->getQuery()
        ;

        return $query->getSingleScalarResult();
    }
    
    /**
     * Récupération de la liste des directions
     */
    public function getDirections() {
        $query = $this->createQueryBuilder('d')
            ->orderBy('d.codeDirection')
            ->where('d.codeDirection is not null')
            ->getQuery()
        ;

        return $query->getResult();
    }

    /**
     * Récupération de la liste des direction et de leurs services
     */
    public function getDirectionsServices() {
        $query = $this->createQueryBuilder('d')
            ->leftJoin('d.listeServices', 's')
            ->addSelect('s')
            ->orderBy('d.codeDirection')
            ->where('d.codeDirection is not null')
            ->getQuery()
        ;

        return $query->getResult();
    }
    
    /**
     * Retourne la liste des direction, des services et des applications utilisées
     */
    public function getListeDirServAppli() {
        $query = $this->createQueryBuilder('d')
            ->leftJoin('d.listeServices', 's')
            ->addSelect('s')
            ->leftJoin('s.listeAcces', 'a')
            ->addSelect('a')
            ->orderBy('d.codeDirection, s.codeService')
            ->where('d.codeDirection is not null')
            ->getQuery()
        ;

        return $query->getResult();
    }

    /**
     * Récupération d'une direction à partir du code direction
     */
    public function getDirection($codeDirection) {
        $query = $this->createQueryBuilder('d')
            ->setParameter('code', $codeDirection)
            ->where('d.codeDirection = :code')
            ->getQuery()
        ;

        return $query->getSingleResult();
    }
    
    /**
     * Vérifie si la direction existe
     */
    public function isDirection($codeDirection) {
        $nbDirection = $this->createQueryBuilder('d')
            ->select('count(d.codeDirection)')
            ->setParameter('code', $codeDirection)
            ->where('d.codeDirection = :code')
            ->getQuery()
            ->getSingleScalarResult()
        ;
        
        if ($nbDirection >= 1)
            $retour = true;
        else 
            $retour = false;
            
        return $retour;
    }
}
