<?php

namespace EVPOS\affectationBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRepository extends EntityRepository
{
    /**
     * Retourne le nombre de services
     */
    public function getNbServices() {
        $query = $this->createQueryBuilder('s')
            ->select('count(s)')
            ->getQuery()
        ;

        return $query->getSingleScalarResult();
    }

    /**
     * Retourne la liste de tous les services
     */
    public function getServices() {
        $query = $this->createQueryBuilder('s')
            ->orderBy('s.codeService')
            ->where('s.codeService is not null')
            ->getQuery()
        ;

        return $query->getResult();
    }

    /**
     * Retourne la liste de tous les services actifs
     */
    public function getServicesActifs() {
        $query = $this->createQueryBuilder('s')
            ->orderBy('s.codeService')
            ->where('s.codeService is not null and s.nbAgent > 0')
            ->getQuery()
        ;

        return $query->getResult();
    }

    /**
     * Retourne la liste de tous les services avec les informations liées
     */
    public function getServicesFull() {
        $query = $this->createQueryBuilder('s')
            ->leftJoin('s.direction', 'd')
            ->leftJoin('s.listeRiu', 'r')
            ->addSelect('d')
            ->addSelect('s')
            ->addSelect('r')
            ->orderBy('d.codeDirection, s.codeService')
            ->where('s.codeService is not null and s.nbAgent > 0')
            ->getQuery()
        ;

        return $query->getResult();
    }

    /**
     * Liste des services non trouvés dans BAZA
     */
    public function getServicesNonBaza() {
        $query = $this->createQueryBuilder('s')
            ->where('s.existeBaza = FALSE')
            ->getQuery()
        ;

        return $query->getResult();
    }


    /**
     * Récupération d'un service à partir de son code
     */
    public function getService($codeService) {
        $query = $this->createQueryBuilder('s')
            ->setParameter('code', $codeService)
            ->where('s.codeService = :code')
            ->getQuery()
        ;

        return $query->getOneOrNullResult();
    }

    /**
     * Récupération d'un service à partir de son code SIRH
     */
    public function getServiceSirh($codeSirh) {
        $query = $this->createQueryBuilder('s')
            ->setParameter('code', $codeSirh)
            ->where('s.codeSirh = :code')
            ->getQuery()
        ;

        return $query->getOneOrNullResult();
    }

    /**
     * Récupération d'un service à partir de son code
     *    --- Pour fiche ---
     */
    public function getServiceFiche($codeService) {
        $query = $this->createQueryBuilder('s')
            ->setParameter('code', $codeService)
            ->where('s.codeService = :code')
            ->getQuery()
        ;

        return $query->getOneOrNullResult();
    }

    /**
     * Teste si le service dont le code est passé en parametre existe
     */
    public function isService($codeService) {
        $nbService = $this->createQueryBuilder('s')
            ->select('count(s.codeService)')
            ->setParameter('code', $codeService)
            ->where('s.codeService = :code')
            ->getQuery()
            ->getSingleScalarResult()
        ;

        if ($nbService >= 1)
            $retour = true;
        else
            $retour = false;

        return $retour;
    }

    public function getPlanif() {
      $query = $this->createQueryBuilder('s')
        ->select('s.codeService, s.libService, s.numEnsemble')
        ->orderBy('s.numEnsemble', 'ASC')
        ->where('s.numEnsemble is not null')
        ->getQuery();

      return $query->getResult();
    }

    public function getEnsembles() {
      $query = $this->createQueryBuilder('s')
        ->select('distinct s.numEnsemble')
        ->orderBy('s.numEnsemble', 'ASC')
        ->getQuery();

      return $query->getResult();
    }

}
