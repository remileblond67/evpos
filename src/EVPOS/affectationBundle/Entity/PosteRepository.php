<?php

namespace EVPOS\affectationBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * PosteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PosteRepository extends EntityRepository {

	/**
	 * Retourne le poste correspondant au hostname passé en paramètre
	 */
	public function getPoste($hostname) {
		$query = $this->createQueryBuilder('p')
            ->setParameter('hostname', $hostname)
            ->where('p.hostname = :hostname')
            ->getQuery()
        ;
        return $query->getOneOrNullResult();
	}

	/**
     * Retourne la liste de tous les postes
     */
    public function getPostes() {
        $query = $this->createQueryBuilder('p')
            ->orderBy('p.hostname')
            ->getQuery()
        ;
        return $query->getResult();
    }

    /**
     * Retourne la liste de tous les postes non affectés à un service
     */
    public function getPostesSansService() {
        $query = $this->createQueryBuilder('p')
            ->orderBy('p.hostname')
            ->where('p.service is null')
            ->getQuery()
        ;
        return $query->getResult();
    }

    /**
     * Retourne la liste de tous les postes
     */
    public function getPostesPages($page, $nbParPage) {
        $query = $this->createQueryBuilder('p')
            ->orderBy('p.hostname')
            ->getQuery()
        ;

        $query
            ->setFirstResult(($page-1) * $nbParPage)
            ->setMaxResults($nbParPage)
        ;
        return new Paginator($query, true);
    }

    /**
     * Retourne la liste de tous les postes et de leurs utilisateurs
     */
    public function getPostesUtil() {
        $query = $this->createQueryBuilder('p')
            ->leftJoin('p.listeUtilisateurs', 'u')
            ->addSelect('u')
            ->orderBy('p.hostname')
            ->getQuery()
        ;
        return $query->getResult();
    }

    /**
     * Retourne la liste des postes de postes sur lesquels sont installées des applications
     */
    public function getPosteUtilisateursAppli() {
        $query = $this->createQueryBuilder('p')
            ->leftJoin('p.listeUtilisateurs', 'u')
            ->addSelect('u')
            ->leftJoin('p.listeUo', 'uo')
            ->addSelect('uo')
            ->where('uo.codeUo is not null and u.matUtil is not null')
            ->getQuery()
        ;
        return $query->getResult();
    }

    /**
     * Retourne la liste des postes non trouvés dans GPARC
     */
    public function findNonGparc() {
        $query = $this->createQueryBuilder('p')
            ->where('p.existeGparc = FALSE')
            ->getQuery()
        ;
        return $query->getResult();
    }

    /**
     * Retourne le nombre de postes
     * Utilisé pour les indicateurs d'avancement
     */
    public function getNbPoste() {
        $query = $this->createQueryBuilder('p')
            ->select('count(p.hostname) nb')
            ->getQuery()
        ;
        return $query->getSingleScalarResult();
    }

    /**
     * Retourne le nombre de postes MOCA
     * Utilisé pour les indicateurs d'avancement
     */
    public function getNbPosteMoca() {
        $query = $this->createQueryBuilder('p')
            ->select('count(p.hostname) nb')
            ->where("p.avancementMigMoca = 'Migré'")
            ->getQuery()
        ;
        return $query->getSingleScalarResult();
    }

    /**
     * Retourne le nombre de postes à migrer
     * Utilisé pour les indicateurs d'avancement
     */
    public function getNbPosteAMigrer() {
        $query = $this->createQueryBuilder('p')
            ->select('count(p.hostname) nb')
            ->where("p.avancementMigMoca != 'Hors scope' and p.avancementMigMoca is not null")
            ->getQuery()
        ;
        return $query->getSingleScalarResult();
    }


    /**
     * Retourne le nombre de postes par type d'usage
     * Utilisé pour les indicateurs d'avancement
     */
    public function getNbPosteUsage() {
        $query = $this->createQueryBuilder('p')
            ->select('p.typeUsage, count(p.hostname) nb')
            ->groupBy('p.typeUsage')
            ->orderBy('nb', 'DESC')
            ->getQuery()
        ;
        return $query->getResult();
    }

    /**
     * Retourne le nombre de poste par master
     */
    public function getNbPosteMaster() {
      $query = $this->createQueryBuilder('p')
        ->select('p.master, count(p.hostname) nb')
        ->groupBy('p.master')
        ->orderBy('p.master')
        ->getQuery()
      ;
      return $query->getResult();
    }

    /**
     * Retourne le nombre de poste par avancement
     */
    public function getNbPosteAvancement() {
      $query = $this->createQueryBuilder('p')
        ->select('p.avancementMigMoca, count(p.hostname) nb')
        ->groupBy('p.avancementMigMoca')
        ->orderBy('p.avancementMigMoca')
        ->getQuery()
      ;
      return $query->getResult();
    }

    /**
     * Liste des postes d'un service
     * -- format JSON
     */
    public function listePosteService($codeService) {
      $query = $this->createQueryBuilder('p')
        ->leftJoin('p.service', 's')
        ->leftJoin('p.listeUtilisateurs', 'u')
        ->leftJoin('p.listeUo', 'uo')
        ->select('p, u, uo')
        ->setParameter('codeService', $codeService)
        ->where('s.codeService = :codeService')
        ->getQuery()
      ;
      $listePoste = $query->getArrayResult();
      return $listePoste;
    }
}
