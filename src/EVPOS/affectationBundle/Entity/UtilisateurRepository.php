<?php

namespace EVPOS\affectationBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * UtilisateurRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UtilisateurRepository extends EntityRepository
{
    /**
     * Retourne la liste de tous les utilisateurs
     */
    public function getUtilisateurs() {
        $query = $this->createQueryBuilder('u')
            ->leftJoin('u.serviceUtil', 's')
            ->addSelect('s')
            ->orderBy('u.nomUtil')
            ->getQuery()
        ;

        return $query->getResult();
    }

    /**
     * Retourne la liste des VIP
     */
    public function getVIP() {
      $query = $this->createQueryBuilder('u')
        ->where('u.niveauVIP is not null')
        ->getQuery();

      return $query->getResult();
    }

    /**
     * Retourne la liste de tous les utilisateurs d'un service
     */
    public function getUtilisateursService($codeService) {
        $query = $this->createQueryBuilder('u')
            ->leftJoin('u.serviceUtil', 's')
            ->setParameter('codeService', $codeService)
            ->where('s.codeService = :codeService')
            ->orderBy('u.matUtil')
            ->getQuery()
        ;

        return $query->getResult();
    }


    /**
     * Retourne le nombre d'utilisateur
     */
    public function nbUtilUoService($uo, $service) {
        $nbUtil = $this->createQueryBuilder('u')
            ->select('count(u.matUtil)')
            ->leftJoin('u.listeAccesUo', 'a')
            ->leftJoin('a.uoAcces', 'uo')
            ->leftJoin('u.serviceUtil', 's')
            ->setParameter('uo', $uo)
            ->setParameter('service', $service)
            ->where('s.codeService = :service and uo.codeUo = :uo')
            ->getQuery()
            ->getSingleScalarResult()
        ;

        return $nbUtil;
    }

    /**
     * Retourne la liste de tous les utilisateurs, avec pagination
     */
    public function getUtilisateursPage($page, $nbParPage) {
        $query = $this->createQueryBuilder('u')
            ->leftJoin('u.serviceUtil', 's')
            ->addSelect('s')
            ->leftJoin('u.listeAcces', 'a')
            ->addSelect('a')
            ->orderBy('u.nomUtil')
            ->getQuery()
        ;

        $query
            ->setFirstResult(($page-1) * $nbParPage)
            ->setMaxResults($nbParPage)
        ;

        return new Paginator($query, true);
    }

    /**
     * Récupération d'un utilisateur à partir de son matricule
     */
    public function getUtilisateur($matUtil) {
        $query = $this->createQueryBuilder('u')
            ->setParameter('matUtil', $matUtil)
            ->where('u.matUtil = :matUtil')
            ->getQuery()
        ;

        return $query->getOneOrNullResult();
    }

    /**
     * Récupération d'un utilisateur à partir de son matricule
     *
     * - Récupération des informations liées -
     */
    public function getUtilisateurFull($matUtil) {
        $query = $this->createQueryBuilder('u')
            ->setParameter('matUtil', $matUtil)
            ->where('u.matUtil = :matUtil')
            ->leftJoin('u.serviceUtil', 'service')
            ->addSelect('service')
            ->leftJoin('service.direction', 'dir')
            ->addSelect('dir')
            ->leftJoin('u.listeAcces', 'acces')
            ->addSelect('acces')
            ->leftJoin('acces.appliAcces', 'appli')
            ->addSelect('appli')
            ->orderBy('appli.codeAppli')
            ->getQuery()
        ;

        return $query->getOneOrNullResult();
    }

    /**
     * Teste si l'utilisateur dont le matricule est passé en parametre existe
     */
    public function isUtilisateur($matUtil) {
        $nbUtil = $this->createQueryBuilder('u')
            ->select('count(u.matUtil)')
            ->setParameter('code', $matUtil)
            ->where('u.matUtil = :code')
            ->getQuery()
            ->getSingleScalarResult()
        ;

        if ($nbUtil >= 1)
            $retour = true;
        else
            $retour = false;

        return $retour;
    }

    /**
     * Retourne le nombre d'utilisateurs
     * Utilisé pour les indicateurs d'avancement
     */
    public function getNbUtilisateurs() {
        $query = $this->createQueryBuilder('u')
            ->select('count(u.matUtil) nb')
            ->getQuery()
        ;

        return $query->getSingleScalarResult();
    }

    /**
     * Retourne la liste des utilisateurs qui n'ont pas été repérés dans BAZA
     */
    public function getUtilisateursSuppr() {
        $query = $this->createQueryBuilder('u')
            ->where('u.existeBaza = FALSE')
            ->getQuery()
        ;

        return $query->getResult();
    }

    /**
     * Retourne la liste de tous les CPI
     */
    public function getListeCpi() {
        $query = $this->createQueryBuilder('u')
            ->addSelect('u.matUtil')
            ->leftJoin('u.listeAppliCpi', 'appli')
            ->addSelect('appli.codeAppli')
            ->where('appli.codeAppli is not null')
            ->getQuery()
        ;
        return $query->getResult();
    }

    /**
     * Retourne la liste des utilisateurs ne s'étant pas connecté depuis 6 mois
     */
    public function findAbsent() {
      $query = $this->createQueryBuilder('u')
          ->leftJoin('u.serviceUtil', 's')
          ->addSelect('u.matUtil, u.nomUtil, s.codeService, s.libService, u.lastLogin, u.ageLogin')
          ->where ('u.ageLogin > 365')
          ->orderBy('u.lastLogin', 'ASC')
          ->getQuery()
      ;
      return $query->getResult();
    }

    public function listeAgentService($codeService) {
      $listeUtil = {};
      $query = $this->createQueryBuilder('u')
        ->leftJoin('u.serviceUtil', 's')
        ->addSelect('u.matUtil, u.nomUtil, u.lastLogin')
        ->setParameter('codeService', $codeService)
        ->where('s.codeService = :codeService')
        ->orderBy('u.nomUtil', 'ASC')
        ->getQuery()
      ;

      foreach ($query->getResult() as $ligne) {
        $util = {
          'matUtil' => $ligne[matUtil],
          'nomUtil' => $ligne[nomUtil],
          'lastLogin' => $ligne[lastLogin]
        };

        $listeUtil.append($util);
      }

      return $listeUtil;
    }
}
