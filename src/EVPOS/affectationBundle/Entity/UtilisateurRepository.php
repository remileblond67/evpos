<?php

namespace EVPOS\affectationBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UtilisateurRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UtilisateurRepository extends EntityRepository
{
    /**
     * Retourne la liste de tous les utilisateurs
     */
    public function getUtilisateurs() {
        $query = $this->createQueryBuilder('u')
            ->leftJoin('u.serviceUtil', 's')
            ->addSelect('s')
            ->orderBy('u.nomUtil')
            ->getQuery()
        ;

        return $query->getResult();
    }

    /**
     * Récupération d'un utilisateur à partir de son matricule
     */
    public function getUtilisateur($matUtil) {
        $query = $this->createQueryBuilder('u')
            ->setParameter('matUtil', $matUtil)
            ->where('u.matUtil = :matUtil')
            ->getQuery()
        ;

        return $query->getSingleResult();
    }

    /**
     * Import des utilisateurs actifs depuis la base Oracle BAZA
     */
    public function importBAZA() {
        $requeteBaza = "select matricule, nom, prenom, code_service from baz_agent where date_sortie is null";
        return true;
    }
    
    /**
     * Teste si l'utilisateur dont le matricule est passé en parametre existe
     */
    public function isUtilisateur($matUtil) {
        $nbUtil = $this->createQueryBuilder('u')
            ->select('count(u.matUtil)')
            ->setParameter('code', $matUtil)
            ->where('u.matUtil = :code')
            ->getQuery()
            ->getSingleScalarResult()
        ;
        
        if ($nbUtil >= 1)
            $retour = true;
        else 
            $retour = false;
            
        return $retour;
    }

    /**
     * Retourne le nombre d'utilisateurs
     * Utilisé pour les indicateurs d'avancement
     */
    public function getNbUtilisateurs() {
        $query = $this->createQueryBuilder('u')
            ->select('count(u.matUtil) nb')
            ->getQuery()
        ;

        return $query->getSingleScalarResult();
    }
}
