<?php

namespace EVPOS\affectationBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
* UORepository
*
* This class was generated by the Doctrine ORM. Add your own custom
* repository methods below.
*/
class UORepository extends EntityRepository
{
  /**
   * Retourne la requête de sélection des codes UO
   */
  public function getListeCodeUo() {
    $qb = $this->createQueryBuilder('uo')
          ->where("uo.migMoca = true")
          ->orderBy("uo.codeUo");
 
    return $qb;
  }

  /**
  * RÃ©cupÃ©ration de la liste des UO
  */
  public function getListeUo() {
    $query = $this->createQueryBuilder('uo')
      ->orderBy('uo.codeUo')
      ->getQuery()
    ;

    return $query->getResult();
  }

  /**
  * RÃ©cupÃ©ration d'une UO Ã  partir de son code
  */
  public function getUo($codeUo) {
    $query = $this->createQueryBuilder('uo')
      ->setParameter('code', $codeUo)
      ->where('uo.codeUo = :code')
      ->getQuery()
    ;

    return $query->getOneOrNullResult();
  }

  /**
   * Retourne la liste des UO sans FIA
   */
  public function getSansFIA() {
    $query = $this->createQueryBuilder('uo')
      ->leftJoin('uo.appli', 'appli')
      ->addSelect('appli')
      ->leftJoin('uo.listeServiceAcces', 'acces')
      ->addSelect('acces')
      ->leftJoin('appli.cpi', 'cpi')
      ->addSelect('cpi')
      ->where("uo.avancementMoca = '1. Pas initiÃ©e' and uo.migMoca = true")
      ->getQuery()
    ;

    return $query->getResult();
  }

  /**
   * Retourne la liste des UO sans utilisateurs
   */
  public function getSansUtil() {
    $query = $this->createQueryBuilder('uo')
      ->leftJoin('uo.appli', 'appli')
      ->addSelect('appli')
      ->leftJoin('appli.cpi', 'cpi')
      ->addSelect('cpi')
      ->where("uo.nbUtil = 0  and uo.migMoca = true")
      ->getQuery()
    ;

    return $query->getResult();
  }


  /**
  * RÃ©cupÃ©ration d'une UO et de toutes ses informations Ã  partir de son code
  */
  public function getUoFull($codeUo) {
    $query = $this->createQueryBuilder('uo')
      ->setParameter('code', $codeUo)
      ->leftJoin('uo.listeAcces', 'a')
      ->addSelect('a')
      ->leftJoin('a.utilAcces', 'ua')
      ->addSelect('ua')
      ->leftJoin('ua.serviceUtil', 's')
      ->addSelect('s')
      ->leftJoin('s.direction', 'd')
      ->addSelect('d')
      ->where('uo.codeUo = :code')
      ->orderBy('d.codeDirection, s.codeService, ua.nomUtil')
      ->getQuery()
    ;

    return $query->getOneOrNullResult();
  }

  /**
  * RÃ©cupÃ©ration de la liste des UO qui n'existent pas dans SUAPP
  **/
  public function getUoSupprimees() {
    $query = $this->createQueryBuilder('uo')
      ->where('uo.existeSuapp = FALSE')
      ->getQuery()
    ;

    return $query->getResult();
  }

  /**
   * Retourne la liste des UO avec leur affectation dans les silos de prod
   */
  public function getUoSilo() {
    $query = $this->createQueryBuilder('uo')
      ->select('uo')
      ->where('uo.migMoca = true')
      ->orderBy('uo.codeUo')
      ->getQuery()
    ;

    /* CrÃ©ation d'un tableau d'affectation UO/silo */
    $tabUoSilo = [];

    foreach ($query->getResult() as $uo) {
      $listeSilo = [];
      $compteur = 0;
      foreach ($uo->getListeSilo() as $silo) {
        if (strpos(strtoupper($silo->getNomSilo()), 'PROD') !== false and $compteur == 0) {
          $listeSilo[] = $silo->getNomSilo();
          $compteur++;
        }
      }
      $tabUoSilo[$uo->getCodeUo()] = array("nbUtil"=>$uo->getNbUtil(), "Silo"=>$listeSilo);
      unset($listeSilo);
    }
    return $tabUoSilo;
  }

  /**
   * Retourne le tableau de rÃ©partition des utilisateurs d'UO dans les directions
   */
  public function getUoDirection() {
    $query = $this->createQueryBuilder('uo')
      ->select('uo')
      ->where('uo.migMoca = true')
      ->orderBy('uo.codeUo')
      ->getQuery()
    ;

    $tabUoDir = [];

    foreach ($query->getResult() as $uo) {
      foreach ($uo->getListeDirectionAcces() as $dir => $nb) {
          $tabUoDir[$uo->getCodeUo()][$dir] = $nb;
      }
    }

    return $tabUoDir;
  }

  /**
   * Retourne la liste des UO hÃ©bergÃ©es dans plusieurs silos de PROD
   */
  public function getUoPlusieursSilos() {
    $listeUoKo = [];
    $query = $this->createQueryBuilder('uo')
      ->select('uo.codeUo, silo.nomSilo')
      ->leftJoin('uo.listeSilo', 'silo')
      ->where("uo.migMoca = true and silo.nomSilo like '%Prod%'")
      ->orderBy('uo.codeUo')
      ->getQuery()
    ;
    return $query->getResult();
  }

  /**
  * Teste si l'UO dont le code est passÃ© en parametre existe
  */
  public function isUo($codeUo) {
    $nbUo = $this->createQueryBuilder('u')
      ->select('count(u.codeUo)')
      ->setParameter('code', $codeUo)
      ->where('u.codeUo = :code')
      ->getQuery()
      ->getSingleScalarResult()
    ;

    if ($nbUo >= 1)
      $retour = true;
    else
      $retour = false;

    return $retour;
  }

  /**
   * Indicateurs d'avancement gÃ©nÃ©ral des UO, par nature
   */
  public function getAvancementGeneral($nature) {
    $query = $this->createQueryBuilder('uo')
      ->select('uo.avancementMoca, count(uo.codeUo) nb')
      ->leftJoin('uo.appli', 'a')
      ->setParameter('nature', $nature)
      ->where("a.natAppli = :nature and uo.avancementMoca <> 'Non migrÃ©'")
      ->groupBy('uo.avancementMoca')
      ->orderBy('uo.avancementMoca', 'ASC')
      ->getQuery()
    ;

    return $query->getResult();
  }

  /**
   * Indicateurs d'avancement dÃ©taillÃ© des UO, par nature
   */
  public function getAvancementDetail($nature) {
    $query = $this->createQueryBuilder('uo')
      ->select('uo.avancementMocaDetail, count(uo.codeUo) nb')
      ->leftJoin('uo.appli', 'a')
      ->setParameter('nature', $nature)
      ->where("a.natAppli = :nature and uo.avancementMocaDetail is not null")
      ->groupBy('uo.avancementMocaDetail')
      ->orderBy('uo.avancementMocaDetail', 'ASC')
      ->getQuery()
    ;
    return $query->getResult();
  }

  public function getNbUo($nature) {
    $query = $this->createQueryBuilder('uo')
      ->select('count(uo.codeUo) nb')
      ->leftJoin('uo.appli', 'a')
      ->setParameter('nature', $nature)
      ->where("a.natAppli = :nature and uo.avancementMoca <> 'Non migrÃ©'")
      ->getQuery()
    ;
    return $query->getOneOrNullResult();
  }

  /**
   * Liste des UO sans aucun utilisateur
   */
  public function getSansUtilisateur() {
    $query = $this->createQueryBuilder('uo')
      ->leftJoin('uo.appli', 'a')
      ->leftJoin('a.cpi', 'cpi')
      ->select('a.codeAppli, uo.codeUo, uo.nbUtil, cpi.matUtil, cpi.nomUtil')
      ->where('uo.nbUtil = 0')
      ->getQuery()
    ;
    return $query->getResult();
  }

  /**
   * Liste des UO planifiÃ©es
   */
  public function getPlanifUo() {
    $query = $this->createQueryBuilder('uo')
      ->leftJoin('uo.listeServiceAcces', 's')
      ->addSelect('s')
      ->leftJoin('s.serviceAcces', 'sa')
      ->addSelect('sa')
      ->leftJoin('uo.appli', 'a')
      ->addSelect('a')
      ->where("sa.numEnsemble is not null and uo.noteAvancementMoca <> '100' and uo.migMoca = true")
      ->orderBy('uo.codeUo, sa.numEnsemble')
      ->getQuery();
    return $query->getResult();
  }

}
