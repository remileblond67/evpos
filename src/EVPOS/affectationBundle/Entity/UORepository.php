<?php

namespace EVPOS\affectationBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
* UORepository
*
* This class was generated by the Doctrine ORM. Add your own custom
* repository methods below.
*/
class UORepository extends EntityRepository
{
  /**
  * Récupération de la liste des UO
  */
  public function getListeUo() {
    $query = $this->createQueryBuilder('uo')
      ->orderBy('uo.codeUo')
      ->getQuery()
    ;

    return $query->getResult();
  }

  /**
  * Récupération d'une UO à partir de son code
  */
  public function getUo($codeUo) {
    $query = $this->createQueryBuilder('uo')
      ->setParameter('code', $codeUo)
      ->where('uo.codeUo = :code')
      ->getQuery()
    ;

    return $query->getOneOrNullResult();
  }

  /**
  * Récupération d'une UO et de toutes ses informations à partir de son code
  */
  public function getUoFull($codeUo) {
    $query = $this->createQueryBuilder('uo')
      ->setParameter('code', $codeUo)
      ->leftJoin('uo.listeAcces', 'a')
      ->addSelect('a')
      ->leftJoin('a.utilAcces', 'ua')
      ->addSelect('ua')
      ->leftJoin('ua.serviceUtil', 's')
      ->addSelect('s')
      ->leftJoin('s.direction', 'd')
      ->addSelect('d')
      ->where('uo.codeUo = :code')
      ->orderBy('d.codeDirection, s.codeService, ua.nomUtil')
      ->getQuery()
    ;

    return $query->getOneOrNullResult();
  }

  /**
  * Récupération de la liste des UO qui n'existent pas dans SUAPP
  **/
  public function getUoSupprimees() {
    $query = $this->createQueryBuilder('uo')
      ->where('uo.existeSuapp = FALSE')
      ->getQuery()
    ;

    return $query->getResult();
  }

  /**
  * Teste si l'UO dont le code est passé en parametre existe
  */
  public function isUo($codeUo) {
    $nbUo = $this->createQueryBuilder('u')
      ->select('count(u.codeUo)')
      ->setParameter('code', $codeUo)
      ->where('u.codeUo = :code')
      ->getQuery()
      ->getSingleScalarResult()
    ;

    if ($nbUo >= 1)
      $retour = true;
    else
      $retour = false;

    return $retour;
  }

  /**
   * indicateurs d'avancement des UO, par nature
   */
  public function getAvancement() {
    $query = $this->createQueryBuilder('uo')
      ->leftJoin('uo.appli', 'a')
      ->addSelect('a')
      ->select('a.appli.natAppli, uo.avancementMoca, uocount(codeUo)')
      ->groupBy('a.appli.natAppli, uo.avancementMoca')
      ->getQuery()
    ;

    return $query->getResult();
  }
}
